<div class="row mt-0 h-100 justify-content-center" style="width: 100%; margin: 0;">
    <div class="col-md-12">
        <div class="row justify-content-center">
            <div class="col-md-3 col-sm-3 col-lg-3 px-1 border" id="left-container">
                <header class="left-container-header mt-2">
                    <!-- Search existing message thead with the user -->
                    <input id="search-convo" class="mt-0" type="text" placeholder="Search.....">
                </header>
                <!-- List of the message thread with the other users container -->
                <div class="message-list-container" id="contact-list-container">
                    @* This is the default layout for the contact *@
                    @* <div class="inbox-container border">
                    <div class="contact-avatar">
                    <img src="./images/avatar.png" alt="Avatar">
                    </div>
                    <div class="contact-message-details">
                    <h6>Master Fred</h6>
                    <p style="font-style: italic;">This is a test message!!!!!</p>
                    </div>
                    </div> *@
                </div>
                <!-- <hr> -->
            </div>
            <div class="col-md-9 col-lg-9 col-sm-9 p-0 border shadow rounded">
                <!-- Header for messaging thread -->
                <header class="m-0 p-2 shadow" id="message-header">
                    <div class="row m-0">
                        <div class="col-1">
                            <div class="contact-avatar">
                                <img src="./images/avatar.png" alt="Avatar">
                            </div>
                        </div>
                        <div class="col-10 align-self-center">
                            <h5 class="" id="recepient-name">Main content</h5>
                        </div>
                    </div>
                </header>
                <!-- Message content main container -->
                <div class="message-convo" style="height: 65vh" id="message-thread-container">
                    <!-- message container this will be appended to the message-thread-container -->
                    @* <div class="message-content-container message-text-left">
                    <p id="message-content">This is a sample message</p>
                    </div>
                    <div class="message-content-container message-text-right">
                    <p id="message-content">This is a sample message</p>
                    </div> *@
                </div>
                <!-- Send Message container  -->
                <div class="message-controller-container mb-4">
                    <input class="shadow" type="text" name="" id="message-input" placeholder="Type Message...">
                    <button class="btn btn-danger" id="send-message">Send</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script>
    class MessagingHub {


        constructor() {

        }

        onDisconnect() {

        }

        onConnected() {

        }

        addGroup() {

        }

        removeGroup() {

        }

        functionTest() {

            console.log('This is from MessagingHubClass!!');
        }

    }
</script>

<script>
    const loadContactsUrl = "/contact/load-contacts";
    const messagingContactUrl = '/Messaging/GetContacts';
    let isChatOpen = false;
    let chatGroupName = null;

    // signalR
    let connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();

    const addToGroup = (groupName) => {
        if (isChatOpen) {
            connection.start().then(() => {
                connection.invoke("JoinGroup", groupName)
            });
        }
    }


    const getGroupName = async (contactId) => {
        const getGroupNameAPI = `/Messaging/GetGroupName/${contactId}`;
        let responseData = null;

        let messageHub = new MessagingHub();

        messageHub.functionTest();

        try {
            const response = await fetch(getGroupNameAPI);
            responseData = await response.json();

        } catch (err) {
            console.log(err);
        }

        console.log(`Group Name: ${responseData.groupName}`);
        addToGroup(responseData.groupName);

        return responseData;
    }

    const loadMessage = async (contactId) => {
        const loadMessageUrl = '/Messaging/loadmessage';
        let messages = null;

        try {
            const response = await fetch(`${loadMessageUrl}/${contactId}`);
            messages = await response.json();

            return messages;

        } catch (error) {
            console.log(error);
        }

        return messages;
    }

    const contactListContainer = document.getElementById('contact-list-container');

    const createMessageContentContainerElement = (res) => {
        // The main job of this function is to append element to the main message content.
        // The message contents are the conversation of the current user and its contact
        const messageMainContainer = document.getElementById('message-thread-container');
        const messageContainer = document.createElement('div');
        const messageTextContent = document.createElement('span');


        for (let item of res) {
            console.log(item.messageContent);
        }
    }

    const viewMessageHandler = async (resName) => {

        console.log(`RecepientName: ${resName}`);
    }

    const displayMessage = async (messages) => {
        const recepientName = document.getElementById('recepient-name');
        const mainContainer = document.getElementById('message-thread-container');
        
        if(mainContainer.children.length > 0) {
            let childElement = mainContainer.lastElementChild;
            
            while(childElement){
                mainContainer.removeChild(childElement);
                childElement = mainContainer.lastElementChild
            }
        }

        for (let message of messages) {
            const messageContentContainer = document.createElement('div');
            const messageContent = document.createElement('p');
            messageContent.classList = "message-content";

            if (message.recipientUsername != recepientName.textContent) {
                messageContentContainer.classList = "message-content-container";
                messageContent.textContent = message.messageContent;
                messageContentContainer.appendChild(messageContent);
                mainContainer.appendChild(messageContentContainer);

            } else {
                messageContentContainer.classList = "message-content-container message-text-right"
                messageContent.textContent = message.messageContent;
                messageContentContainer.appendChild(messageContent);
                mainContainer.appendChild(messageContentContainer);
            
            }
        }

        let scroll = document.querySelector("#message-thread-container");
        scroll.scrollTop = scroll.scrollHeight;
        
    };

    const createNavigateClickEvent = async (clickableElement, contactId, userName) => {
        const recepientName = document.getElementById('recepient-name');

        // make a asyncClickHandler for this button
        clickableElement.addEventListener("click", async () => {
            recepientName.textContent = userName;
            isChatOpen = true;
            console.log("This is a fucking test");
            // add to group
            await getGroupName(contactId);

            loadMessage(contactId).then((messages) => {

                 displayMessage(messages);

            });
        });

    }


    const createContactContainer = async (userName, contactId) => {
        // for div containers
        const parentDivContainer = document.createElement('div');
        const avatarDivContainer = document.createElement('div');
        const contactDivContainer = document.createElement('div');



        // for child containers
        const avatarImgElement = document.createElement('img');
        const contactNameElement = document.createElement('h6');
        const contactRecentMessageElement = document.createElement('p');

        // avatar
        avatarImgElement.src = "./images/avatar.png";
        avatarDivContainer.classList = "contact-avatar";
        avatarDivContainer.appendChild(avatarImgElement);
        parentDivContainer.appendChild(avatarDivContainer);

        // textNode for userName
        contactNameElement.textContent = userName;
        contactRecentMessageElement.textContent = "This is just a test";

        contactDivContainer.appendChild(contactNameElement);
        contactDivContainer.appendChild(contactRecentMessageElement);

        parentDivContainer.appendChild(contactDivContainer);
        parentDivContainer.classList = 'inbox-container border';
        contactListContainer.appendChild(parentDivContainer);

        await createNavigateClickEvent(parentDivContainer, contactId, userName);

    @* parentDivContainer.addEventListener('click', viewMessageHandler); *@
    };

    const loadContacts = async () => {

        const response = await fetch(loadContactsUrl);
        const responseJson = await response.json();

        if (responseJson) {
            for (let contact of responseJson) {
                await createContactContainer(contact.username, contact.contactId);
            }
        }
        
        return responseJson;
    }

    loadContacts();

</script>