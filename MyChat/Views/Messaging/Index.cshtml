<div class="row mt-0 h-100 justify-content-center" style="width: 100%; margin: 0;">
    <div class="col-md-11">
        <div class="row justify-content-center">
            <div class="col-md-4 col-sm-4 col-lg-4 px-1 border" id="left-container">
                <header class="left-container-header mt-3 mb-4">
                    <input id="search-convo" class="mt-0" type="text" placeholder="Search Contact...">
                </header>
                <div class="message-list-container" id="contact-list-container"></div>
            </div>
            <div class="col-md-8 col-lg-8 col-sm-8 p-0 border shadow rounded">
                <header class="m-0 p-2 shadow" id="message-header">
                    <div class="row m-0">
                        <div class="col-1">
                            <div class="contact-avatar">
                                <img src="./images/avatar.png" alt="Avatar">
                            </div>
                        </div>
                        <div class="col-10 align-self-center">
                            <h5 class="" id="recepient-name">
                            </h5>
                        </div>
                    </div>
                </header>
                <div class="message-convo" style="height: 65vh" id="message-thread-container">
                </div>
                <div class="message-controller-container mb-4">
                    <input type="text" name="" id="message-input" placeholder="Type Message...">
                    <button class="btn btn-danger" id="send-message">
                        Send
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>

<!-- Messaging Hub Script -->

<script>
    class GroupNameModel {
        constructor(){
            this.groupName = null;
        }

        updateGroupNameModel(groupName){
            if(groupName) {
                this.groupName = groupName;
            }

            return this.groupName;
        }

        getGroupName(){
            return this.groupName;
        }
    }

    class MessagePayloadModel {
        constructor(){
            this.messagePayload = {
                SenderId: null,
                SenderUsername: null,
                RecipientId: null,
                RecipientUsername: null,
                MessageContent: null
            }   
        }

        updatePayload(initialPayload){
            this.messagePayload.SenderId = initialPayload.senderId;
            this.messagePayload.SenderUsername = initialPayload.senderUsername;
            this.messagePayload.RecipientId = initialPayload.recipientId;
            this.messagePayload.RecipientUsername = initialPayload.recipientUsername;
        }

        getUpdatedMessagePayload(){
            return this.messagePayload;
        }

    }

</script>

<script>

    class MessagingHubService {

        constructor(groupNameModel, messagePayloadModel) {
            this.connection = new signalR.HubConnectionBuilder()
                                         .withUrl("/chatHub")
                                         .build();

            this.sendButton = document.getElementById('send-message');
            this.messageInput = document.getElementById('message-input');
            this.apiService = new ApiService();
            this.groupNameModel = groupNameModel;
            this.messagePayloadModel = messagePayloadModel;
        }
        
        async startSendMessageHandler(){
            this.sendButton.addEventListener('click', async () => {
                let payload = this.messagePayloadModel.getUpdatedMessagePayload()
                const groupName = this.groupNameModel.getGroupName();

                if(this.messageInput.value == null || this.messageInput.value == ""){
                    return;
                }

                payload.MessageContent = this.messageInput.value;
                
                
                await this.connection.invoke("SendMessageToGroup", groupName, payload);
                this.messageInput.value = "";
    
            })
            return this.sendButton;
        }

        async createHubConnection(groupName){

            await this.stopHubConnection();

            this.connection.start().then(async () => {
                await this.connection.invoke("JoinGroup", groupName)
            });

        }
        
        async getIncomingMessage(){
            this.hubConnection().on("ReceiveMessage", async (message) => {
                // call the message template here to append the message
                console.log(message);
            })
        }

        async stopHubConnection() {
            if (this.connection) {
                await this.connection.stop();
            }
        }

        async addGroup(groupName) {
            this.stopHubConnection();
            this.hubConnection().then(async () => {
                await this.hubConnection().invoke("JoinGroup", groupName);
            });
        }

        async hubConnection() {
            return this.connection;
        }

        async sendMessageHandler(groupName, payload) {
            try {
                await this.hubConnection().invoke("SendMessageToGroup", groupName, payload);
            } catch (error) {
                window.alert(error);
            }
        }
    }

</script>


<!-- ContactTemplate Script -->
<script>
    class ContactTemplate {
        constructor() {
            this.contactParentContainer = document.getElementById('contact-list-container');
            this._avatarImgPath = "/images/avatar.png";
            this.recipientName = document.getElementById('recepient-name');
            this.apiService = new ApiService();
        }

        createContactElement(username, contactId, contactImg = this._avatarImgPath) {
            // create the contact container which contain avatar and contact info
            const createdContactContainer = document.createElement('div');
            createdContactContainer.classList.add("contact-container", "border");
            // call the create avatar method to create an element
            const avatar = this.createAvatarElement(this._avatarImgPath);
            createdContactContainer.appendChild(avatar);

            const createdContactInfoContainer = this.createContactInfoElement(username, contactId);
            createdContactContainer.appendChild(createdContactInfoContainer);

            this.contactParentContainer.appendChild(createdContactContainer);
            @* console.log("CreateContectElemet being invoked/") *@
            this.changeRecipientNameHandler(createdContactContainer, username);
            
            return createdContactContainer;
        }

        createAvatarElement(contactImg) {
            // create the div wrapper for avatar
            const createdAvatarContainer = document.createElement('div');
            const createdAvatarImgElement = document.createElement('img');
            createdAvatarContainer.classList.add("contact-avatar");
            createdAvatarImgElement.src = contactImg;

            createdAvatarContainer.appendChild(createdAvatarImgElement);

            return createdAvatarContainer;
        }

        createContactInfoElement(contactUsername,
            contactId,
            recentMessage = "Recent Message Test!") {

            // create contactInfoContainer
            const createdContactInfoContainer = document.createElement('div');
            const createdContactUsernameElement = document.createElement('h6');
            const createdContactRecentMessageElement = document.createElement('p');

            // TODO: add class for contact Username and recent message css style
            createdContactUsernameElement.textContent = contactUsername;
            createdContactRecentMessageElement.textContent = recentMessage;

            createdContactInfoContainer.appendChild(createdContactUsernameElement);
            createdContactInfoContainer.appendChild(createdContactRecentMessageElement);

            return createdContactInfoContainer;
        }

        // temporary click event handler 

        async changeRecipientNameHandler(contactContainer, username) {
            contactContainer.addEventListener('click', async () => {
                this.recipientName.textContent = username;
            })
        }

        async contactTestMethod() {
            console.log("Test");
        }
    }
</script>

<!-- MessagingTemplate Script -->
<script>
    class MessageTemplate {
        constructor() {
            this.messageParentContainer = document.getElementById('message-thread-container');
            this.recipientName = document.getElementById('recepient-name');
        }

        // this function will be used when loading and receiving
        createMessageTemplate(message) {
            // remove existing elements

            const createdMessageContainer = document.createElement('div');
            const createdMessageContentElement = document.createElement('p');

            @* createdMessageContainer.classList.add("message-content-container"); *@

            createdMessageContentElement.textContent = message.messageContent;
            createdMessageContentElement.classList.add("message-content");

            if (message.recipientUsername === this.recipientName.textContent) {
                createdMessageContainer.classList.add("message-content-container", "message-text-right");
            } else {
                createdMessageContainer.classList.add("message-content-container","message-text-left")
            }

            createdMessageContainer.appendChild(createdMessageContentElement);
            this.messageParentContainer.appendChild(createdMessageContainer);
         
            this.messageParentContainer.scrollTop = this.messageParentContainer.scrollHeight;

            return this.messageParentContainer;
        }

        appendMessage(message, messageContainerInstance) {
            // TODO
        }

        getMessageParentContainer() {
            return this.messageParentContainer;
        }

        removeExistingMessages() {
            if(this.messageParentContainer.children.length == 0) return;

            let childement = this.messageParentContainer.lastElementChild;

            while (childement) {
                this.messageParentContainer.removeChild(childement)
                childement = this.messageParentContainer.lastElementChild;
            }
            return this.messageParentContainer;
        }
    }
</script>

<!-- ApiService Script -->
<script>
    class ApiService {
        // This is when working for calling the server/api
        constructor() {
            this.messagingUrl = "/Messaging";
            this.getMessageUrl = `${this.messagingUrl}/loadmessage`;
            this.getGroupNameUrl = `${this.messagingUrl}/GetGroupName`;
            this.contactUrl = "/contact";
            this.getContactsUrl = `${this.contactUrl}/load-contacts`;
            this.initialMessagingPaloadUrl = `${this.messagingUrl}/InitialMessagingPayload`;
        }

        async testMethod() {
            window.alert("Test Method!!!");
        }

        async getGroupName(contactId) {
            const groupName = await this.fetchApi(`${this.getGroupNameUrl}/${contactId}`);

            if (groupName) {
                return groupName;
            } else {
                window.alert("Cannot get Group Name");
            }

        }

        async getContacts() {
            const contacts = await this.fetchApi(`${this.getContactsUrl}`);
            if (contacts) {
                return contacts;
            } else {
                window.alert("Get Contacts API Failed");
            }
        }

        async getMessages(contactId) {
            const messages = await this.fetchApi(`${this.getMessageUrl}/${contactId}`);
            if (messages) {
                return messages;
            } else {
                window.alert("Get Message Error")
            }
        }

        // this payload will be used when
        async getInitialPayload(contactId) {

            const initialPayload = await this.fetchApi(`${this.initialMessagingPaloadUrl}/${contactId}`);

            return initialPayload;
        }

        getPayloadModel() {
            return {
                SenderId: null,
                SenderUsername: null,
                RecipientId: null,
                RecipientUsername: null,
                MessageContent: null
            }
        }

        async fetchApi(url) {
            try {

                const response = await fetch(url);

                return await response.json();

            } catch (error) {
                console.log(error);
            }
        }

    }
</script>

<script>
    const mainApp = async () => {

        let groupNameModel = new GroupNameModel();
        let messagePayloadModel = new MessagePayloadModel();

        const apiService = new ApiService();
        const contactTemplate = new ContactTemplate();
        const messageTemplate = new MessageTemplate();
        const messageHubService = new MessagingHubService(groupNameModel, messagePayloadModel);




        const response = await apiService.getContacts();
        // create contact template
        for(const contactItem of response){
            const createdContactTemplate = contactTemplate.createContactElement(contactItem.username, contactItem.contactId);
            
            // creating an events to the contact when it is being clicked!!!
            createdContactTemplate.addEventListener('click', async () => {

                const messages = await apiService.getMessages(contactItem.contactId);
                // add group connection
                const { groupName } = await apiService.getGroupName(contactItem.contactId);
                const initialPayload = await apiService.getInitialPayload(contactItem.contactId);
                
                messagePayloadModel.updatePayload(initialPayload);
                groupNameModel.updateGroupNameModel(groupName);
                // call the messagehub to add groupname
                await messageHubService.createHubConnection(groupName);
                

                // remove all existing messages
                messageTemplate.removeExistingMessages();

                for(const message of messages){
                    messageTemplate.createMessageTemplate(message)
                }
            })
        }

        await messageHubService.startSendMessageHandler()
        
    }

    mainApp(); 
    // TODO: When there is a message received, append it to the message thread
</script>
